# docker-compose.yml - Complete orchestration

services:
  # Development service
  app-dev:
    build:
      context: .
      dockerfile: Dockerfile.dev
    ports:
      - "3000:3000"
    volumes:
      - .:/app
      - /app/node_modules  # Prevent node_modules from being overwritten
    environment:
      - NODE_ENV=development
      - PORT=3000
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - dev

  # Production service
  app-prod:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
      - PORT=3000
    networks:
      - app-network
    restart: unless-stopped
    profiles:
      - prod

  # Test service
  app-test:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=test
    networks:
      - app-network
    profiles:
      - test
    command: npm test

  # Test with coverage
  app-test-coverage:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - .:/app
      - /app/node_modules
      - ./coverage:/app/coverage
    environment:
      - NODE_ENV=test
    networks:
      - app-network
    profiles:
      - test
    command: npm run test:coverage

  # Test in watch mode for development
  app-test-watch:
    build:
      context: .
      dockerfile: Dockerfile.test
    volumes:
      - .:/app
      - /app/node_modules
    environment:
      - NODE_ENV=test
    networks:
      - app-network
    profiles:
      - test
    command: npm run test:watch
    stdin_open: true
    tty: true

networks:
  app-network:
    driver: bridge

volumes:
  node_modules: